#Read in necessary packages
library(data.table)
library(zoo)
library(forecast)
library(ggplot2)

#Read in Data
train <- fread("train.csv")
test <- fread("test.csv")
store <- fread("store.csv")

#Brief Look at the Data
str(train)
str(test)
str(store)
# head(train); tail(train)
# head(test); tail(test)
train[, Date := as.Date(Date)]
test[, Date := as.Date(Date)]
store

#Order data by Date
train <- train[order(Date)]
test <- test[order(Date)]

# more in-depth summary
summary(train)
summary(test)
test[is.na(test$Open), ] # Only store 622
test$Open[test$Store == 622]

#Replace null values with 1
test[is.na(test)] <- 1

# Unique values per column
train[, lapply(.SD, function(x) length(unique(x)))]

test[, lapply(.SD, function(x) length(unique(x)))]

# All test stores are also in the train data
sum(unique(test$Store) %in% unique(train$Store)) 

# 259 train stores are not in the test data
sum(!(unique(train$Store) %in% unique(test$Store))) 

table(train$Open) / nrow(train) # Percent Open Train

table(train$Promo) / nrow(train) # Percent of the time promo in train

table(train$StateHoliday) / nrow(train) # Percent of the time holiday in train

table(test$StateHoliday) / nrow(test) # no b and c = no easter holiday and no christmas

table(train$SchoolHoliday) / nrow(train) # Percent of the time school holiday in train

#There are no obvious breaks in the data. The test period ranges from 2015-08-01 to 2015-09-17,
#so the task is to predict 48 days. The train period ranges from 2013-01-01 to 2015-07-31.

#Plot dates
plot(train$Date, type = "l")
plot(test$Date, type = "l")

# As expected all 856 stores to be predicted daily
all(table(test$Date) == 856) 

#Visualize Sales data through histogram
hist(train$Sales, 100)

hist(aggregate(train[Sales != 0]$Sales, 
               by = list(train[Sales != 0]$Store), mean)$x, 100, 
     main = "Mean sales per store when store was not closed")

#Visualize Customers data through histogram
hist(train$Customers, 100)

hist(aggregate(train[Sales != 0]$Customers, 
               by = list(train[Sales != 0]$Store), mean)$x, 100,
     main = "Mean customers per store when store was not closed")

#Split sales by school holiday or not
ggplot(train[Sales != 0], aes(x = factor(SchoolHoliday), y = Sales)) +
  geom_jitter(alpha = 0.1) +
  geom_boxplot(color = "yellow", outlier.colour = NA, fill = NA)

#see the impact of customers on sales
ggplot(train[train$Sales != 0 & train$Customers != 0],
       aes(x = log(Customers), y = log(Sales))) + 
  geom_point(alpha = 0.2) + geom_smooth(method="gam", formula = y ~ s(x, bs = "cs"))

#Sales split on Promos
ggplot(train[train$Sales != 0 & train$Customers != 0],
       aes(x = factor(Promo), y = Sales)) + 
  geom_jitter(alpha = 0.1) +
  geom_boxplot(color = "yellow", outlier.colour = NA, fill = NA)

# Number of Customers split on Promotion
ggplot(train[train$Sales != 0 & train$Customers != 0],
       aes(x = factor(Promo), y = Customers)) + 
  geom_jitter(alpha = 0.1) +
  geom_boxplot(color = "yellow", outlier.colour = NA, fill = NA)

#Note: I chose to not plot that data including days with 0 sales or customers because that would have biased the boxplots.

#Sales is as expected strongly correlated with the number of customers. 
#It looks like the Boxplots of customers overlap a little more than the boxplots of sales. 
#This would mean that the promos are not mainly attracting more customers but make customers spend more. 

#The mean amount spent per customer is about one Euro higher:
with(train[train$Sales != 0 & train$Promo == 0], mean(Sales / Customers))

with(train[train$Sales != 0 & train$Promo == 1], mean(Sales / Customers))

#There are sometimes promos while the respective store is closed 
#and there are promos 45% of the time:
table(ifelse(train$Sales != 0, "Sales > 0", "Sales = 0"),
      ifelse(train$Promo, "Promo", "No promo"))

#At least there are no sales when the stores are closed but there are some stores that,
#according to the data, made no sales although they were opened even if they had some 
#customers. These observations may be errors in the data / outliers:
table(ifelse(train$Open == 1, "Opened", "Closed"),
      ifelse(train$Sales > 0, "Sales > 0", "Sales = 0"))

# That tends to happen on consecutive days. Some stores even had customers
# (who bought nothing?)
train[Open == 1 & Sales == 0]

#The stores have different amounts of days with zero sales. 
#There are spikes in the sales before the stores close and after the reopen:
zerosPerStore <- sort(tapply(train$Sales, list(train$Store), function(x) sum(x == 0)))
hist(zerosPerStore,100)
zerosPerStore

# Stores with the most zeros in their sales:
tail(zerosPerStore, 10)

# Some stores were closed for some time, some of those were closed multiple times
plot(train[Store == 972, Sales], ylab = "Sales", xlab = "Days", main = "Store 972")

plot(train[Store == 103, Sales], ylab = "Sales", xlab = "Days", main = "Store 103")

plot(train[Store == 708, Sales], ylab = "Sales", xlab = "Days", main = "Store 708")

#There are also stores that have no zeros in their sales. 
#These are the exception since they are opened also on sundays / holidays.
#The sales of those stores on sundays are particularly high:
ggplot(train[Store == 85], 
       aes(x = Date, y = Sales, 
           color = factor(DayOfWeek == 7), shape = factor(DayOfWeek == 7))) + 
  geom_point(size = 3) + ggtitle("Sales of store 85 (True if sunday)")

ggplot(train[Store == 262], 
       aes(x = Date, y = Sales, 
           color = factor(DayOfWeek == 7), shape = factor(DayOfWeek == 7))) + 
  geom_point(size = 3) + ggtitle("Sales of store 262 (True if sunday)")

#That is not true in general. 
#The variability of sales on sundays is quite high while the median is not:
ggplot(train[Sales != 0],
       aes(x = factor(DayOfWeek), y = Sales)) + 
  geom_jitter(alpha = 0.1) + 
  geom_boxplot(color = "yellow", outlier.colour = NA, fill = NA)

#The store file contains information about the stores that can be 
#linked to train and test via the store ID.
summary(store)
table(store$StoreType)
table(store$Assortment)

# There is a connection between store type and type of assortment
table(data.frame(Assortment = store$Assortment, StoreType = store$StoreType))

hist(store$CompetitionDistance, 100)

# Convert the CompetitionOpenSince... variables to one Date variable
store$CompetitionOpenSince <- as.yearmon(paste(store$CompetitionOpenSinceYear, 
                                               store$CompetitionOpenSinceMonth, sep = "-"))
# One competitor opened 1900
hist(as.yearmon("2015-10") - store$CompetitionOpenSince, 100, 
     main = "Years since opening of nearest competition")

# Convert the Promo2Since... variables to one Date variable
# Assume that the promo starts on the first day of the week
store$Promo2Since <- as.POSIXct(paste(store$Promo2SinceYear, 
                                      store$Promo2SinceWeek, 1, sep = "-"),
                                format = "%Y-%U-%u")
hist(as.numeric(as.POSIXct("2015-10-01", format = "%Y-%m-%d") - store$Promo2Since), 
     100, main = "Days since start of promo2")

table(store$PromoInterval)

#The stores with promos tend to make lower sales. 
#This does not necessary mean that the promos don’t help or are counterproductive. 
#They are possibly measures that are taken mainly by stores with low sales in the first place:

# Merge store and train 
train_store <- merge(train, store, by = "Store")
ggplot(train_store[Sales != 0], aes(x = factor(PromoInterval), y = Sales)) + 
  geom_jitter(alpha = 0.1) + 
  geom_boxplot(color = "yellow", outlier.colour = NA, fill = NA)

#So what happens if a competitor opens? 
#In order to assess this effect we fetch data from all stores 
#that first have NA as CompetitorDistance and later some value. 
#Only the month, not the date, of the opening of the competitor is 
#known so we need a rather large window to see the effect (100 days). 
#147 stores had a competitor move into their area during the available time span. 
#The competition leaves a ‘dent’ in the sales which looks a little different depending
#on the chosen timespan so I wouldn’t like to argue about statistical significance 
#based on this plot alone. It’s informative to look at anyway:

# Sales before and after competition opens
train_store$DateYearmon <- as.yearmon(train_store$Date)
train_store <- train_store[order(Date)]
timespan <- 100 # Days to collect before and after Opening of competition
beforeAndAfterComp <- function(s) {
  x <- train_store[Store == s]
  daysWithComp <- x$CompetitionOpenSince >= x$DateYearmon
  if (any(!daysWithComp)) {
    compOpening <- head(which(!daysWithComp), 1) - 1
    if (compOpening > timespan & compOpening < (nrow(x) - timespan)) {
      x <- x[(compOpening - timespan):(compOpening + timespan), ] 
      x$Day <- 1:nrow(x)
      return(x)
    }
  }
}
temp <- lapply(unique(train_store[!is.na(CompetitionOpenSince)]$Store), beforeAndAfterComp)
temp <- do.call(rbind, temp)
# 147 stores first had no competition but at least 100 days before the end
# of the data set
length(unique(temp$Store))

#Plot sales before and after competition
ggplot(temp[Sales != 0], aes(x = Day, y = Sales)) + 
  geom_smooth() + 
  ggtitle(paste("Competition opening around day", timespan))

#Seasonal Plot
temp <- as.data.frame(train)
temp$Date<-as.Date(as.character(temp$Date))
temp$year <- as.factor(format(temp$Date, "%Y"))
temp$month <- as.factor(format(temp$Date, "%m"))
agg <- aggregate(Sales ~ ., data=temp[, c("Sales", "month" ,"year")], FUN=sum)
SalesTS <- ts(agg$Sales, start=2013, frequency=12)
col = rainbow(3)
seasonplot(SalesTS, col=col, year.labels.left = TRUE, pch=19, las=1)
